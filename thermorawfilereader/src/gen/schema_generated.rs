// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod librawfilereader {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_POLARITY: i8 = -1;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_POLARITY: i8 = 1;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_POLARITY: [Polarity; 3] = [
  Polarity::Negative,
  Polarity::Unknown,
  Polarity::Positive,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Polarity(pub i8);
#[allow(non_upper_case_globals)]
impl Polarity {
  pub const Negative: Self = Self(-1);
  pub const Unknown: Self = Self(0);
  pub const Positive: Self = Self(1);

  pub const ENUM_MIN: i8 = -1;
  pub const ENUM_MAX: i8 = 1;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::Negative,
    Self::Unknown,
    Self::Positive,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::Negative => Some("Negative"),
      Self::Unknown => Some("Unknown"),
      Self::Positive => Some("Positive"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Polarity {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Polarity {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Polarity {
    type Output = Polarity;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Polarity {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Polarity {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Polarity {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_SPECTRUM_MODE: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_SPECTRUM_MODE: i8 = 2;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_SPECTRUM_MODE: [SpectrumMode; 3] = [
  SpectrumMode::Unknown,
  SpectrumMode::Centroid,
  SpectrumMode::Profile,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct SpectrumMode(pub i8);
#[allow(non_upper_case_globals)]
impl SpectrumMode {
  pub const Unknown: Self = Self(0);
  pub const Centroid: Self = Self(1);
  pub const Profile: Self = Self(2);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 2;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::Unknown,
    Self::Centroid,
    Self::Profile,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::Unknown => Some("Unknown"),
      Self::Centroid => Some("Centroid"),
      Self::Profile => Some("Profile"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for SpectrumMode {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for SpectrumMode {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for SpectrumMode {
    type Output = SpectrumMode;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for SpectrumMode {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for SpectrumMode {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for SpectrumMode {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_DISSOCIATION_METHOD: u8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_DISSOCIATION_METHOD: u8 = 64;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_DISSOCIATION_METHOD: [DissociationMethod; 12] = [
  DissociationMethod::Unknown,
  DissociationMethod::CID,
  DissociationMethod::HCD,
  DissociationMethod::ETD,
  DissociationMethod::ETCID,
  DissociationMethod::ETHCD,
  DissociationMethod::ECD,
  DissociationMethod::ECCID,
  DissociationMethod::ECHCD,
  DissociationMethod::NETD,
  DissociationMethod::PTD,
  DissociationMethod::MPD,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct DissociationMethod(pub u8);
#[allow(non_upper_case_globals)]
impl DissociationMethod {
  pub const Unknown: Self = Self(0);
  pub const CID: Self = Self(1);
  pub const HCD: Self = Self(2);
  pub const ETD: Self = Self(4);
  pub const ETCID: Self = Self(5);
  pub const ETHCD: Self = Self(6);
  pub const ECD: Self = Self(8);
  pub const ECCID: Self = Self(9);
  pub const ECHCD: Self = Self(10);
  pub const NETD: Self = Self(16);
  pub const PTD: Self = Self(32);
  pub const MPD: Self = Self(64);

  pub const ENUM_MIN: u8 = 0;
  pub const ENUM_MAX: u8 = 64;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::Unknown,
    Self::CID,
    Self::HCD,
    Self::ETD,
    Self::ETCID,
    Self::ETHCD,
    Self::ECD,
    Self::ECCID,
    Self::ECHCD,
    Self::NETD,
    Self::PTD,
    Self::MPD,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::Unknown => Some("Unknown"),
      Self::CID => Some("CID"),
      Self::HCD => Some("HCD"),
      Self::ETD => Some("ETD"),
      Self::ETCID => Some("ETCID"),
      Self::ETHCD => Some("ETHCD"),
      Self::ECD => Some("ECD"),
      Self::ECCID => Some("ECCID"),
      Self::ECHCD => Some("ECHCD"),
      Self::NETD => Some("NETD"),
      Self::PTD => Some("PTD"),
      Self::MPD => Some("MPD"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for DissociationMethod {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for DissociationMethod {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<u8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for DissociationMethod {
    type Output = DissociationMethod;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<u8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for DissociationMethod {
  type Scalar = u8;
  #[inline]
  fn to_little_endian(self) -> u8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: u8) -> Self {
    let b = u8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for DissociationMethod {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for DissociationMethod {}
// struct IsolationWindowT, aligned to 8
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct IsolationWindowT(pub [u8; 24]);
impl Default for IsolationWindowT { 
  fn default() -> Self { 
    Self([0; 24])
  }
}
impl core::fmt::Debug for IsolationWindowT {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("IsolationWindowT")
      .field("lower", &self.lower())
      .field("target", &self.target())
      .field("upper", &self.upper())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for IsolationWindowT {}
impl<'a> flatbuffers::Follow<'a> for IsolationWindowT {
  type Inner = &'a IsolationWindowT;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a IsolationWindowT>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a IsolationWindowT {
  type Inner = &'a IsolationWindowT;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<IsolationWindowT>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for IsolationWindowT {
    type Output = IsolationWindowT;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const IsolationWindowT as *const u8, Self::size());
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for IsolationWindowT {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> IsolationWindowT {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    lower: f64,
    target: f64,
    upper: f64,
  ) -> Self {
    let mut s = Self([0; 24]);
    s.set_lower(lower);
    s.set_target(target);
    s.set_upper(upper);
    s
  }

  pub fn lower(&self) -> f64 {
    let mut mem = core::mem::MaybeUninit::<<f64 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f64 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_lower(&mut self, x: f64) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<<f64 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn target(&self) -> f64 {
    let mut mem = core::mem::MaybeUninit::<<f64 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[8..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f64 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_target(&mut self, x: f64) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[8..].as_mut_ptr(),
        core::mem::size_of::<<f64 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn upper(&self) -> f64 {
    let mut mem = core::mem::MaybeUninit::<<f64 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[16..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f64 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_upper(&mut self, x: f64) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[16..].as_mut_ptr(),
        core::mem::size_of::<<f64 as EndianScalar>::Scalar>(),
      );
    }
  }

}

// struct ActivationT, aligned to 8
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct ActivationT(pub [u8; 16]);
impl Default for ActivationT { 
  fn default() -> Self { 
    Self([0; 16])
  }
}
impl core::fmt::Debug for ActivationT {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("ActivationT")
      .field("dissociation_method", &self.dissociation_method())
      .field("collision_energy", &self.collision_energy())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for ActivationT {}
impl<'a> flatbuffers::Follow<'a> for ActivationT {
  type Inner = &'a ActivationT;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a ActivationT>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a ActivationT {
  type Inner = &'a ActivationT;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<ActivationT>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for ActivationT {
    type Output = ActivationT;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const ActivationT as *const u8, Self::size());
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for ActivationT {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> ActivationT {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    dissociation_method: DissociationMethod,
    collision_energy: f64,
  ) -> Self {
    let mut s = Self([0; 16]);
    s.set_dissociation_method(dissociation_method);
    s.set_collision_energy(collision_energy);
    s
  }

  pub fn dissociation_method(&self) -> DissociationMethod {
    let mut mem = core::mem::MaybeUninit::<<DissociationMethod as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<DissociationMethod as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_dissociation_method(&mut self, x: DissociationMethod) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<<DissociationMethod as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn collision_energy(&self) -> f64 {
    let mut mem = core::mem::MaybeUninit::<<f64 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[8..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f64 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_collision_energy(&mut self, x: f64) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[8..].as_mut_ptr(),
        core::mem::size_of::<<f64 as EndianScalar>::Scalar>(),
      );
    }
  }

}

// struct PrecursorT, aligned to 8
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct PrecursorT(pub [u8; 64]);
impl Default for PrecursorT { 
  fn default() -> Self { 
    Self([0; 64])
  }
}
impl core::fmt::Debug for PrecursorT {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("PrecursorT")
      .field("mz", &self.mz())
      .field("intensity", &self.intensity())
      .field("charge", &self.charge())
      .field("parent_index", &self.parent_index())
      .field("isolation_window", &self.isolation_window())
      .field("activation", &self.activation())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for PrecursorT {}
impl<'a> flatbuffers::Follow<'a> for PrecursorT {
  type Inner = &'a PrecursorT;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a PrecursorT>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a PrecursorT {
  type Inner = &'a PrecursorT;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<PrecursorT>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for PrecursorT {
    type Output = PrecursorT;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const PrecursorT as *const u8, Self::size());
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for PrecursorT {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> PrecursorT {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    mz: f64,
    intensity: f32,
    charge: i32,
    parent_index: i32,
    isolation_window: &IsolationWindowT,
    activation: &ActivationT,
  ) -> Self {
    let mut s = Self([0; 64]);
    s.set_mz(mz);
    s.set_intensity(intensity);
    s.set_charge(charge);
    s.set_parent_index(parent_index);
    s.set_isolation_window(isolation_window);
    s.set_activation(activation);
    s
  }

  pub fn mz(&self) -> f64 {
    let mut mem = core::mem::MaybeUninit::<<f64 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f64 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_mz(&mut self, x: f64) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<<f64 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn intensity(&self) -> f32 {
    let mut mem = core::mem::MaybeUninit::<<f32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[8..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_intensity(&mut self, x: f32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[8..].as_mut_ptr(),
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn charge(&self) -> i32 {
    let mut mem = core::mem::MaybeUninit::<<i32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[12..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<i32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_charge(&mut self, x: i32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[12..].as_mut_ptr(),
        core::mem::size_of::<<i32 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn parent_index(&self) -> i32 {
    let mut mem = core::mem::MaybeUninit::<<i32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[16..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<i32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_parent_index(&mut self, x: i32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[16..].as_mut_ptr(),
        core::mem::size_of::<<i32 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn isolation_window(&self) -> &IsolationWindowT {
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid struct in this slot
    unsafe { &*(self.0[24..].as_ptr() as *const IsolationWindowT) }
  }

  #[allow(clippy::identity_op)]
  pub fn set_isolation_window(&mut self, x: &IsolationWindowT) {
    self.0[24..24 + 24].copy_from_slice(&x.0)
  }

  pub fn activation(&self) -> &ActivationT {
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid struct in this slot
    unsafe { &*(self.0[48..].as_ptr() as *const ActivationT) }
  }

  #[allow(clippy::identity_op)]
  pub fn set_activation(&mut self, x: &ActivationT) {
    self.0[48..48 + 16].copy_from_slice(&x.0)
  }

}

pub enum SpectrumDataOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct SpectrumData<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SpectrumData<'a> {
  type Inner = SpectrumData<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> SpectrumData<'a> {
  pub const VT_MZ: flatbuffers::VOffsetT = 4;
  pub const VT_INTENSITY: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SpectrumData { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args SpectrumDataArgs<'args>
  ) -> flatbuffers::WIPOffset<SpectrumData<'bldr>> {
    let mut builder = SpectrumDataBuilder::new(_fbb);
    if let Some(x) = args.intensity { builder.add_intensity(x); }
    if let Some(x) = args.mz { builder.add_mz(x); }
    builder.finish()
  }


  #[inline]
  pub fn mz(&self) -> Option<flatbuffers::Vector<'a, f64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, f64>>>(SpectrumData::VT_MZ, None)}
  }
  #[inline]
  pub fn intensity(&self) -> Option<flatbuffers::Vector<'a, f32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, f32>>>(SpectrumData::VT_INTENSITY, None)}
  }
}

impl flatbuffers::Verifiable for SpectrumData<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, f64>>>("mz", Self::VT_MZ, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, f32>>>("intensity", Self::VT_INTENSITY, false)?
     .finish();
    Ok(())
  }
}
pub struct SpectrumDataArgs<'a> {
    pub mz: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, f64>>>,
    pub intensity: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, f32>>>,
}
impl<'a> Default for SpectrumDataArgs<'a> {
  #[inline]
  fn default() -> Self {
    SpectrumDataArgs {
      mz: None,
      intensity: None,
    }
  }
}

pub struct SpectrumDataBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> SpectrumDataBuilder<'a, 'b> {
  #[inline]
  pub fn add_mz(&mut self, mz: flatbuffers::WIPOffset<flatbuffers::Vector<'b , f64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SpectrumData::VT_MZ, mz);
  }
  #[inline]
  pub fn add_intensity(&mut self, intensity: flatbuffers::WIPOffset<flatbuffers::Vector<'b , f32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SpectrumData::VT_INTENSITY, intensity);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> SpectrumDataBuilder<'a, 'b> {
    let start = _fbb.start_table();
    SpectrumDataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SpectrumData<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SpectrumData<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SpectrumData");
      ds.field("mz", &self.mz());
      ds.field("intensity", &self.intensity());
      ds.finish()
  }
}
pub enum SpectrumDescriptionOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct SpectrumDescription<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SpectrumDescription<'a> {
  type Inner = SpectrumDescription<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> SpectrumDescription<'a> {
  pub const VT_INDEX: flatbuffers::VOffsetT = 4;
  pub const VT_MS_LEVEL: flatbuffers::VOffsetT = 6;
  pub const VT_TIME: flatbuffers::VOffsetT = 8;
  pub const VT_POLARITY: flatbuffers::VOffsetT = 10;
  pub const VT_MODE: flatbuffers::VOffsetT = 12;
  pub const VT_PRECURSOR: flatbuffers::VOffsetT = 14;
  pub const VT_DATA: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SpectrumDescription { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args SpectrumDescriptionArgs<'args>
  ) -> flatbuffers::WIPOffset<SpectrumDescription<'bldr>> {
    let mut builder = SpectrumDescriptionBuilder::new(_fbb);
    builder.add_time(args.time);
    if let Some(x) = args.data { builder.add_data(x); }
    if let Some(x) = args.precursor { builder.add_precursor(x); }
    builder.add_index(args.index);
    builder.add_mode(args.mode);
    builder.add_polarity(args.polarity);
    builder.add_ms_level(args.ms_level);
    builder.finish()
  }


  #[inline]
  pub fn index(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SpectrumDescription::VT_INDEX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ms_level(&self) -> u8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u8>(SpectrumDescription::VT_MS_LEVEL, Some(2)).unwrap()}
  }
  #[inline]
  pub fn time(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SpectrumDescription::VT_TIME, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn polarity(&self) -> Polarity {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Polarity>(SpectrumDescription::VT_POLARITY, Some(Polarity::Positive)).unwrap()}
  }
  #[inline]
  pub fn mode(&self) -> SpectrumMode {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<SpectrumMode>(SpectrumDescription::VT_MODE, Some(SpectrumMode::Profile)).unwrap()}
  }
  #[inline]
  pub fn precursor(&self) -> Option<&'a PrecursorT> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<PrecursorT>(SpectrumDescription::VT_PRECURSOR, None)}
  }
  #[inline]
  pub fn data(&self) -> Option<SpectrumData<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<SpectrumData>>(SpectrumDescription::VT_DATA, None)}
  }
}

impl flatbuffers::Verifiable for SpectrumDescription<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("index", Self::VT_INDEX, false)?
     .visit_field::<u8>("ms_level", Self::VT_MS_LEVEL, false)?
     .visit_field::<f64>("time", Self::VT_TIME, false)?
     .visit_field::<Polarity>("polarity", Self::VT_POLARITY, false)?
     .visit_field::<SpectrumMode>("mode", Self::VT_MODE, false)?
     .visit_field::<PrecursorT>("precursor", Self::VT_PRECURSOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<SpectrumData>>("data", Self::VT_DATA, false)?
     .finish();
    Ok(())
  }
}
pub struct SpectrumDescriptionArgs<'a> {
    pub index: i32,
    pub ms_level: u8,
    pub time: f64,
    pub polarity: Polarity,
    pub mode: SpectrumMode,
    pub precursor: Option<&'a PrecursorT>,
    pub data: Option<flatbuffers::WIPOffset<SpectrumData<'a>>>,
}
impl<'a> Default for SpectrumDescriptionArgs<'a> {
  #[inline]
  fn default() -> Self {
    SpectrumDescriptionArgs {
      index: 0,
      ms_level: 2,
      time: 0.0,
      polarity: Polarity::Positive,
      mode: SpectrumMode::Profile,
      precursor: None,
      data: None,
    }
  }
}

pub struct SpectrumDescriptionBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> SpectrumDescriptionBuilder<'a, 'b> {
  #[inline]
  pub fn add_index(&mut self, index: i32) {
    self.fbb_.push_slot::<i32>(SpectrumDescription::VT_INDEX, index, 0);
  }
  #[inline]
  pub fn add_ms_level(&mut self, ms_level: u8) {
    self.fbb_.push_slot::<u8>(SpectrumDescription::VT_MS_LEVEL, ms_level, 2);
  }
  #[inline]
  pub fn add_time(&mut self, time: f64) {
    self.fbb_.push_slot::<f64>(SpectrumDescription::VT_TIME, time, 0.0);
  }
  #[inline]
  pub fn add_polarity(&mut self, polarity: Polarity) {
    self.fbb_.push_slot::<Polarity>(SpectrumDescription::VT_POLARITY, polarity, Polarity::Positive);
  }
  #[inline]
  pub fn add_mode(&mut self, mode: SpectrumMode) {
    self.fbb_.push_slot::<SpectrumMode>(SpectrumDescription::VT_MODE, mode, SpectrumMode::Profile);
  }
  #[inline]
  pub fn add_precursor(&mut self, precursor: &PrecursorT) {
    self.fbb_.push_slot_always::<&PrecursorT>(SpectrumDescription::VT_PRECURSOR, precursor);
  }
  #[inline]
  pub fn add_data(&mut self, data: flatbuffers::WIPOffset<SpectrumData<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<SpectrumData>>(SpectrumDescription::VT_DATA, data);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> SpectrumDescriptionBuilder<'a, 'b> {
    let start = _fbb.start_table();
    SpectrumDescriptionBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SpectrumDescription<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SpectrumDescription<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SpectrumDescription");
      ds.field("index", &self.index());
      ds.field("ms_level", &self.ms_level());
      ds.field("time", &self.time());
      ds.field("polarity", &self.polarity());
      ds.field("mode", &self.mode());
      ds.field("precursor", &self.precursor());
      ds.field("data", &self.data());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `SpectrumDescription`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_spectrum_description_unchecked`.
pub fn root_as_spectrum_description(buf: &[u8]) -> Result<SpectrumDescription, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<SpectrumDescription>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `SpectrumDescription` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_spectrum_description_unchecked`.
pub fn size_prefixed_root_as_spectrum_description(buf: &[u8]) -> Result<SpectrumDescription, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<SpectrumDescription>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `SpectrumDescription` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_spectrum_description_unchecked`.
pub fn root_as_spectrum_description_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<SpectrumDescription<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<SpectrumDescription<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `SpectrumDescription` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_spectrum_description_unchecked`.
pub fn size_prefixed_root_as_spectrum_description_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<SpectrumDescription<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<SpectrumDescription<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a SpectrumDescription and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `SpectrumDescription`.
pub unsafe fn root_as_spectrum_description_unchecked(buf: &[u8]) -> SpectrumDescription {
  flatbuffers::root_unchecked::<SpectrumDescription>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed SpectrumDescription and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `SpectrumDescription`.
pub unsafe fn size_prefixed_root_as_spectrum_description_unchecked(buf: &[u8]) -> SpectrumDescription {
  flatbuffers::size_prefixed_root_unchecked::<SpectrumDescription>(buf)
}
#[inline]
pub fn finish_spectrum_description_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<SpectrumDescription<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_spectrum_description_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<SpectrumDescription<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod librawfilereader

