// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace librawfilereader
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct InstrumentModelT : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static InstrumentModelT GetRootAsInstrumentModelT(ByteBuffer _bb) { return GetRootAsInstrumentModelT(_bb, new InstrumentModelT()); }
  public static InstrumentModelT GetRootAsInstrumentModelT(ByteBuffer _bb, InstrumentModelT obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public InstrumentModelT __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public librawfilereader.InstrumentConfigurationT? Configurations(int j) { int o = __p.__offset(4); return o != 0 ? (librawfilereader.InstrumentConfigurationT?)(new librawfilereader.InstrumentConfigurationT()).__assign(__p.__vector(o) + j * 2, __p.bb) : null; }
  public int ConfigurationsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public string Model { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetModelBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetModelBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetModelArray() { return __p.__vector_as_array<byte>(8); }
  public string SerialNumber { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSerialNumberBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetSerialNumberBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetSerialNumberArray() { return __p.__vector_as_array<byte>(10); }
  public string HardwareVersion { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetHardwareVersionBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetHardwareVersionBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetHardwareVersionArray() { return __p.__vector_as_array<byte>(12); }
  public string SoftwareVersion { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSoftwareVersionBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetSoftwareVersionBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetSoftwareVersionArray() { return __p.__vector_as_array<byte>(14); }

  public static Offset<librawfilereader.InstrumentModelT> CreateInstrumentModelT(FlatBufferBuilder builder,
      VectorOffset configurationsOffset = default(VectorOffset),
      StringOffset nameOffset = default(StringOffset),
      StringOffset modelOffset = default(StringOffset),
      StringOffset serial_numberOffset = default(StringOffset),
      StringOffset hardware_versionOffset = default(StringOffset),
      StringOffset software_versionOffset = default(StringOffset)) {
    builder.StartTable(6);
    InstrumentModelT.AddSoftwareVersion(builder, software_versionOffset);
    InstrumentModelT.AddHardwareVersion(builder, hardware_versionOffset);
    InstrumentModelT.AddSerialNumber(builder, serial_numberOffset);
    InstrumentModelT.AddModel(builder, modelOffset);
    InstrumentModelT.AddName(builder, nameOffset);
    InstrumentModelT.AddConfigurations(builder, configurationsOffset);
    return InstrumentModelT.EndInstrumentModelT(builder);
  }

  public static void StartInstrumentModelT(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddConfigurations(FlatBufferBuilder builder, VectorOffset configurationsOffset) { builder.AddOffset(0, configurationsOffset.Value, 0); }
  public static void StartConfigurationsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(2, numElems, 1); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddModel(FlatBufferBuilder builder, StringOffset modelOffset) { builder.AddOffset(2, modelOffset.Value, 0); }
  public static void AddSerialNumber(FlatBufferBuilder builder, StringOffset serialNumberOffset) { builder.AddOffset(3, serialNumberOffset.Value, 0); }
  public static void AddHardwareVersion(FlatBufferBuilder builder, StringOffset hardwareVersionOffset) { builder.AddOffset(4, hardwareVersionOffset.Value, 0); }
  public static void AddSoftwareVersion(FlatBufferBuilder builder, StringOffset softwareVersionOffset) { builder.AddOffset(5, softwareVersionOffset.Value, 0); }
  public static Offset<librawfilereader.InstrumentModelT> EndInstrumentModelT(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<librawfilereader.InstrumentModelT>(o);
  }
}


static public class InstrumentModelTVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*Configurations*/, 2 /*librawfilereader.InstrumentConfigurationT*/, false)
      && verifier.VerifyString(tablePos, 6 /*Name*/, false)
      && verifier.VerifyString(tablePos, 8 /*Model*/, false)
      && verifier.VerifyString(tablePos, 10 /*SerialNumber*/, false)
      && verifier.VerifyString(tablePos, 12 /*HardwareVersion*/, false)
      && verifier.VerifyString(tablePos, 14 /*SoftwareVersion*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
