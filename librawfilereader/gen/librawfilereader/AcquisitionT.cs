// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace librawfilereader
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct AcquisitionT : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static AcquisitionT GetRootAsAcquisitionT(ByteBuffer _bb) { return GetRootAsAcquisitionT(_bb, new AcquisitionT()); }
  public static AcquisitionT GetRootAsAcquisitionT(ByteBuffer _bb, AcquisitionT obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AcquisitionT __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double LowMz { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public double HighMz { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public float InjectionTime { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float? CompensationVoltage { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float?)null; } }
  public librawfilereader.MassAnalyzer MassAnalyzer { get { int o = __p.__offset(12); return o != 0 ? (librawfilereader.MassAnalyzer)__p.bb.Get(o + __p.bb_pos) : librawfilereader.MassAnalyzer.FTMS; } }

  public static Offset<librawfilereader.AcquisitionT> CreateAcquisitionT(FlatBufferBuilder builder,
      double low_mz = 0.0,
      double high_mz = 0.0,
      float injection_time = 0.0f,
      float? compensation_voltage = null,
      librawfilereader.MassAnalyzer mass_analyzer = librawfilereader.MassAnalyzer.FTMS) {
    builder.StartTable(5);
    AcquisitionT.AddHighMz(builder, high_mz);
    AcquisitionT.AddLowMz(builder, low_mz);
    AcquisitionT.AddCompensationVoltage(builder, compensation_voltage);
    AcquisitionT.AddInjectionTime(builder, injection_time);
    AcquisitionT.AddMassAnalyzer(builder, mass_analyzer);
    return AcquisitionT.EndAcquisitionT(builder);
  }

  public static void StartAcquisitionT(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddLowMz(FlatBufferBuilder builder, double lowMz) { builder.AddDouble(0, lowMz, 0.0); }
  public static void AddHighMz(FlatBufferBuilder builder, double highMz) { builder.AddDouble(1, highMz, 0.0); }
  public static void AddInjectionTime(FlatBufferBuilder builder, float injectionTime) { builder.AddFloat(2, injectionTime, 0.0f); }
  public static void AddCompensationVoltage(FlatBufferBuilder builder, float? compensationVoltage) { builder.AddFloat(3, compensationVoltage); }
  public static void AddMassAnalyzer(FlatBufferBuilder builder, librawfilereader.MassAnalyzer massAnalyzer) { builder.AddByte(4, (byte)massAnalyzer, 5); }
  public static Offset<librawfilereader.AcquisitionT> EndAcquisitionT(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<librawfilereader.AcquisitionT>(o);
  }
}


static public class AcquisitionTVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*LowMz*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*HighMz*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*InjectionTime*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*CompensationVoltage*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*MassAnalyzer*/, 1 /*librawfilereader.MassAnalyzer*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
