// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace librawfilereader
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct AcquisitionT : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static AcquisitionT GetRootAsAcquisitionT(ByteBuffer _bb) { return GetRootAsAcquisitionT(_bb, new AcquisitionT()); }
  public static AcquisitionT GetRootAsAcquisitionT(ByteBuffer _bb, AcquisitionT obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AcquisitionT __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double LowMz { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public double HighMz { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public float InjectionTime { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float CompensationVoltages(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int CompensationVoltagesLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetCompensationVoltagesBytes() { return __p.__vector_as_span<float>(10, 4); }
#else
  public ArraySegment<byte>? GetCompensationVoltagesBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public float[] GetCompensationVoltagesArray() { return __p.__vector_as_array<float>(10); }
  public librawfilereader.MassAnalyzer MassAnalyzer { get { int o = __p.__offset(12); return o != 0 ? (librawfilereader.MassAnalyzer)__p.bb.Get(o + __p.bb_pos) : librawfilereader.MassAnalyzer.FTMS; } }
  public int ScanEvent { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public librawfilereader.IonizationMode IonizationMode { get { int o = __p.__offset(16); return o != 0 ? (librawfilereader.IonizationMode)__p.bb.Get(o + __p.bb_pos) : librawfilereader.IonizationMode.NanoSpray; } }
  public float? Resolution { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float?)null; } }

  public static Offset<librawfilereader.AcquisitionT> CreateAcquisitionT(FlatBufferBuilder builder,
      double low_mz = 0.0,
      double high_mz = 0.0,
      float injection_time = 0.0f,
      VectorOffset compensation_voltagesOffset = default(VectorOffset),
      librawfilereader.MassAnalyzer mass_analyzer = librawfilereader.MassAnalyzer.FTMS,
      int scan_event = 1,
      librawfilereader.IonizationMode ionization_mode = librawfilereader.IonizationMode.NanoSpray,
      float? resolution = null) {
    builder.StartTable(8);
    AcquisitionT.AddHighMz(builder, high_mz);
    AcquisitionT.AddLowMz(builder, low_mz);
    AcquisitionT.AddResolution(builder, resolution);
    AcquisitionT.AddScanEvent(builder, scan_event);
    AcquisitionT.AddCompensationVoltages(builder, compensation_voltagesOffset);
    AcquisitionT.AddInjectionTime(builder, injection_time);
    AcquisitionT.AddIonizationMode(builder, ionization_mode);
    AcquisitionT.AddMassAnalyzer(builder, mass_analyzer);
    return AcquisitionT.EndAcquisitionT(builder);
  }

  public static void StartAcquisitionT(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddLowMz(FlatBufferBuilder builder, double lowMz) { builder.AddDouble(0, lowMz, 0.0); }
  public static void AddHighMz(FlatBufferBuilder builder, double highMz) { builder.AddDouble(1, highMz, 0.0); }
  public static void AddInjectionTime(FlatBufferBuilder builder, float injectionTime) { builder.AddFloat(2, injectionTime, 0.0f); }
  public static void AddCompensationVoltages(FlatBufferBuilder builder, VectorOffset compensationVoltagesOffset) { builder.AddOffset(3, compensationVoltagesOffset.Value, 0); }
  public static VectorOffset CreateCompensationVoltagesVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCompensationVoltagesVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCompensationVoltagesVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCompensationVoltagesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCompensationVoltagesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMassAnalyzer(FlatBufferBuilder builder, librawfilereader.MassAnalyzer massAnalyzer) { builder.AddByte(4, (byte)massAnalyzer, 5); }
  public static void AddScanEvent(FlatBufferBuilder builder, int scanEvent) { builder.AddInt(5, scanEvent, 1); }
  public static void AddIonizationMode(FlatBufferBuilder builder, librawfilereader.IonizationMode ionizationMode) { builder.AddByte(6, (byte)ionizationMode, 5); }
  public static void AddResolution(FlatBufferBuilder builder, float? resolution) { builder.AddFloat(7, resolution); }
  public static Offset<librawfilereader.AcquisitionT> EndAcquisitionT(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<librawfilereader.AcquisitionT>(o);
  }
}


static public class AcquisitionTVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*LowMz*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*HighMz*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*InjectionTime*/, 4 /*float*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*CompensationVoltages*/, 4 /*float*/, false)
      && verifier.VerifyField(tablePos, 12 /*MassAnalyzer*/, 1 /*librawfilereader.MassAnalyzer*/, 1, false)
      && verifier.VerifyField(tablePos, 14 /*ScanEvent*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*IonizationMode*/, 1 /*librawfilereader.IonizationMode*/, 1, false)
      && verifier.VerifyField(tablePos, 18 /*Resolution*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
