// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace librawfilereader
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FileDescriptionT : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static FileDescriptionT GetRootAsFileDescriptionT(ByteBuffer _bb) { return GetRootAsFileDescriptionT(_bb, new FileDescriptionT()); }
  public static FileDescriptionT GetRootAsFileDescriptionT(ByteBuffer _bb, FileDescriptionT obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FileDescriptionT __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string CreationDate { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreationDateBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetCreationDateBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetCreationDateArray() { return __p.__vector_as_array<byte>(4); }
  public string SampleId { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSampleIdBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetSampleIdBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetSampleIdArray() { return __p.__vector_as_array<byte>(6); }
  public string SourceFile { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceFileBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetSourceFileBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetSourceFileArray() { return __p.__vector_as_array<byte>(8); }
  public uint SpectraPerMsLevel(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int SpectraPerMsLevelLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<uint> GetSpectraPerMsLevelBytes() { return __p.__vector_as_span<uint>(10, 4); }
#else
  public ArraySegment<byte>? GetSpectraPerMsLevelBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public uint[] GetSpectraPerMsLevelArray() { return __p.__vector_as_array<uint>(10); }
  public string TrailerHeaders(int j) { int o = __p.__offset(12); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TrailerHeadersLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<librawfilereader.FileDescriptionT> CreateFileDescriptionT(FlatBufferBuilder builder,
      StringOffset creation_dateOffset = default(StringOffset),
      StringOffset sample_idOffset = default(StringOffset),
      StringOffset source_fileOffset = default(StringOffset),
      VectorOffset spectra_per_ms_levelOffset = default(VectorOffset),
      VectorOffset trailer_headersOffset = default(VectorOffset)) {
    builder.StartTable(5);
    FileDescriptionT.AddTrailerHeaders(builder, trailer_headersOffset);
    FileDescriptionT.AddSpectraPerMsLevel(builder, spectra_per_ms_levelOffset);
    FileDescriptionT.AddSourceFile(builder, source_fileOffset);
    FileDescriptionT.AddSampleId(builder, sample_idOffset);
    FileDescriptionT.AddCreationDate(builder, creation_dateOffset);
    return FileDescriptionT.EndFileDescriptionT(builder);
  }

  public static void StartFileDescriptionT(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddCreationDate(FlatBufferBuilder builder, StringOffset creationDateOffset) { builder.AddOffset(0, creationDateOffset.Value, 0); }
  public static void AddSampleId(FlatBufferBuilder builder, StringOffset sampleIdOffset) { builder.AddOffset(1, sampleIdOffset.Value, 0); }
  public static void AddSourceFile(FlatBufferBuilder builder, StringOffset sourceFileOffset) { builder.AddOffset(2, sourceFileOffset.Value, 0); }
  public static void AddSpectraPerMsLevel(FlatBufferBuilder builder, VectorOffset spectraPerMsLevelOffset) { builder.AddOffset(3, spectraPerMsLevelOffset.Value, 0); }
  public static VectorOffset CreateSpectraPerMsLevelVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSpectraPerMsLevelVectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSpectraPerMsLevelVectorBlock(FlatBufferBuilder builder, ArraySegment<uint> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSpectraPerMsLevelVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<uint>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSpectraPerMsLevelVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTrailerHeaders(FlatBufferBuilder builder, VectorOffset trailerHeadersOffset) { builder.AddOffset(4, trailerHeadersOffset.Value, 0); }
  public static VectorOffset CreateTrailerHeadersVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTrailerHeadersVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTrailerHeadersVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTrailerHeadersVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTrailerHeadersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<librawfilereader.FileDescriptionT> EndFileDescriptionT(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<librawfilereader.FileDescriptionT>(o);
  }
}


static public class FileDescriptionTVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*CreationDate*/, false)
      && verifier.VerifyString(tablePos, 6 /*SampleId*/, false)
      && verifier.VerifyString(tablePos, 8 /*SourceFile*/, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*SpectraPerMsLevel*/, 4 /*uint*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 12 /*TrailerHeaders*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
