// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace librawfilereader
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SpectrumDescription : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static SpectrumDescription GetRootAsSpectrumDescription(ByteBuffer _bb) { return GetRootAsSpectrumDescription(_bb, new SpectrumDescription()); }
  public static SpectrumDescription GetRootAsSpectrumDescription(ByteBuffer _bb, SpectrumDescription obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifySpectrumDescription(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, SpectrumDescriptionVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SpectrumDescription __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Index { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public byte MsLevel { get { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)2; } }
  public double Time { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public librawfilereader.Polarity Polarity { get { int o = __p.__offset(10); return o != 0 ? (librawfilereader.Polarity)__p.bb.GetSbyte(o + __p.bb_pos) : librawfilereader.Polarity.Positive; } }
  public librawfilereader.SpectrumMode Mode { get { int o = __p.__offset(12); return o != 0 ? (librawfilereader.SpectrumMode)__p.bb.GetSbyte(o + __p.bb_pos) : librawfilereader.SpectrumMode.Profile; } }
  public librawfilereader.PrecursorT? Precursor { get { int o = __p.__offset(14); return o != 0 ? (librawfilereader.PrecursorT?)(new librawfilereader.PrecursorT()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public librawfilereader.SpectrumData? Data { get { int o = __p.__offset(16); return o != 0 ? (librawfilereader.SpectrumData?)(new librawfilereader.SpectrumData()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public string FilterString { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFilterStringBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetFilterStringBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetFilterStringArray() { return __p.__vector_as_array<byte>(18); }
  public librawfilereader.AcquisitionT? Acquisition { get { int o = __p.__offset(20); return o != 0 ? (librawfilereader.AcquisitionT?)(new librawfilereader.AcquisitionT()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static void StartSpectrumDescription(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddIndex(FlatBufferBuilder builder, int index) { builder.AddInt(0, index, 0); }
  public static void AddMsLevel(FlatBufferBuilder builder, byte msLevel) { builder.AddByte(1, msLevel, 2); }
  public static void AddTime(FlatBufferBuilder builder, double time) { builder.AddDouble(2, time, 0.0); }
  public static void AddPolarity(FlatBufferBuilder builder, librawfilereader.Polarity polarity) { builder.AddSbyte(3, (sbyte)polarity, 1); }
  public static void AddMode(FlatBufferBuilder builder, librawfilereader.SpectrumMode mode) { builder.AddSbyte(4, (sbyte)mode, 2); }
  public static void AddPrecursor(FlatBufferBuilder builder, Offset<librawfilereader.PrecursorT> precursorOffset) { builder.AddStruct(5, precursorOffset.Value, 0); }
  public static void AddData(FlatBufferBuilder builder, Offset<librawfilereader.SpectrumData> dataOffset) { builder.AddOffset(6, dataOffset.Value, 0); }
  public static void AddFilterString(FlatBufferBuilder builder, StringOffset filterStringOffset) { builder.AddOffset(7, filterStringOffset.Value, 0); }
  public static void AddAcquisition(FlatBufferBuilder builder, Offset<librawfilereader.AcquisitionT> acquisitionOffset) { builder.AddOffset(8, acquisitionOffset.Value, 0); }
  public static Offset<librawfilereader.SpectrumDescription> EndSpectrumDescription(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<librawfilereader.SpectrumDescription>(o);
  }
  public static void FinishSpectrumDescriptionBuffer(FlatBufferBuilder builder, Offset<librawfilereader.SpectrumDescription> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedSpectrumDescriptionBuffer(FlatBufferBuilder builder, Offset<librawfilereader.SpectrumDescription> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class SpectrumDescriptionVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Index*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*MsLevel*/, 1 /*byte*/, 1, false)
      && verifier.VerifyField(tablePos, 8 /*Time*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*Polarity*/, 1 /*librawfilereader.Polarity*/, 1, false)
      && verifier.VerifyField(tablePos, 12 /*Mode*/, 1 /*librawfilereader.SpectrumMode*/, 1, false)
      && verifier.VerifyField(tablePos, 14 /*Precursor*/, 64 /*librawfilereader.PrecursorT*/, 8, false)
      && verifier.VerifyTable(tablePos, 16 /*Data*/, librawfilereader.SpectrumDataVerify.Verify, false)
      && verifier.VerifyString(tablePos, 18 /*FilterString*/, false)
      && verifier.VerifyTable(tablePos, 20 /*Acquisition*/, librawfilereader.AcquisitionTVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
