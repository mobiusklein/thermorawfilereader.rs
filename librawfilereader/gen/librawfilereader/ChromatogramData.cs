// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace librawfilereader
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ChromatogramData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ChromatogramData GetRootAsChromatogramData(ByteBuffer _bb) { return GetRootAsChromatogramData(_bb, new ChromatogramData()); }
  public static ChromatogramData GetRootAsChromatogramData(ByteBuffer _bb, ChromatogramData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ChromatogramData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double Time(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int TimeLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetTimeBytes() { return __p.__vector_as_span<double>(4, 8); }
#else
  public ArraySegment<byte>? GetTimeBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public double[] GetTimeArray() { return __p.__vector_as_array<double>(4); }
  public float Intensity(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int IntensityLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetIntensityBytes() { return __p.__vector_as_span<float>(6, 4); }
#else
  public ArraySegment<byte>? GetIntensityBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public float[] GetIntensityArray() { return __p.__vector_as_array<float>(6); }

  public static Offset<librawfilereader.ChromatogramData> CreateChromatogramData(FlatBufferBuilder builder,
      VectorOffset timeOffset = default(VectorOffset),
      VectorOffset intensityOffset = default(VectorOffset)) {
    builder.StartTable(2);
    ChromatogramData.AddIntensity(builder, intensityOffset);
    ChromatogramData.AddTime(builder, timeOffset);
    return ChromatogramData.EndChromatogramData(builder);
  }

  public static void StartChromatogramData(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddTime(FlatBufferBuilder builder, VectorOffset timeOffset) { builder.AddOffset(0, timeOffset.Value, 0); }
  public static VectorOffset CreateTimeVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTimeVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTimeVectorBlock(FlatBufferBuilder builder, ArraySegment<double> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTimeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<double>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTimeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddIntensity(FlatBufferBuilder builder, VectorOffset intensityOffset) { builder.AddOffset(1, intensityOffset.Value, 0); }
  public static VectorOffset CreateIntensityVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateIntensityVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIntensityVectorBlock(FlatBufferBuilder builder, ArraySegment<float> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIntensityVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<float>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartIntensityVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<librawfilereader.ChromatogramData> EndChromatogramData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<librawfilereader.ChromatogramData>(o);
  }
}


static public class ChromatogramDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*Time*/, 8 /*double*/, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*Intensity*/, 4 /*float*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
