// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace librawfilereader
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ChromatogramDescription : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static ChromatogramDescription GetRootAsChromatogramDescription(ByteBuffer _bb) { return GetRootAsChromatogramDescription(_bb, new ChromatogramDescription()); }
  public static ChromatogramDescription GetRootAsChromatogramDescription(ByteBuffer _bb, ChromatogramDescription obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ChromatogramDescription __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public librawfilereader.TraceTypeT TraceType { get { int o = __p.__offset(4); return o != 0 ? (librawfilereader.TraceTypeT)__p.bb.GetShort(o + __p.bb_pos) : librawfilereader.TraceTypeT.MassRange; } }
  public librawfilereader.ChromatogramData? Data { get { int o = __p.__offset(6); return o != 0 ? (librawfilereader.ChromatogramData?)(new librawfilereader.ChromatogramData()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public int StartIndex { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EndIndex { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<librawfilereader.ChromatogramDescription> CreateChromatogramDescription(FlatBufferBuilder builder,
      librawfilereader.TraceTypeT trace_type = librawfilereader.TraceTypeT.MassRange,
      Offset<librawfilereader.ChromatogramData> dataOffset = default(Offset<librawfilereader.ChromatogramData>),
      int start_index = 0,
      int end_index = 0) {
    builder.StartTable(4);
    ChromatogramDescription.AddEndIndex(builder, end_index);
    ChromatogramDescription.AddStartIndex(builder, start_index);
    ChromatogramDescription.AddData(builder, dataOffset);
    ChromatogramDescription.AddTraceType(builder, trace_type);
    return ChromatogramDescription.EndChromatogramDescription(builder);
  }

  public static void StartChromatogramDescription(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddTraceType(FlatBufferBuilder builder, librawfilereader.TraceTypeT traceType) { builder.AddShort(0, (short)traceType, 0); }
  public static void AddData(FlatBufferBuilder builder, Offset<librawfilereader.ChromatogramData> dataOffset) { builder.AddOffset(1, dataOffset.Value, 0); }
  public static void AddStartIndex(FlatBufferBuilder builder, int startIndex) { builder.AddInt(2, startIndex, 0); }
  public static void AddEndIndex(FlatBufferBuilder builder, int endIndex) { builder.AddInt(3, endIndex, 0); }
  public static Offset<librawfilereader.ChromatogramDescription> EndChromatogramDescription(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<librawfilereader.ChromatogramDescription>(o);
  }
}


static public class ChromatogramDescriptionVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*TraceType*/, 2 /*librawfilereader.TraceTypeT*/, 2, false)
      && verifier.VerifyTable(tablePos, 6 /*Data*/, librawfilereader.ChromatogramDataVerify.Verify, false)
      && verifier.VerifyField(tablePos, 8 /*StartIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*EndIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
